.TH "src/solsys3.c" 3 "Version v1.2" "SuperNOVAS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/solsys3.c
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "short \fBearth_sun_calc\fP (double jd_tdb, enum \fBnovas_planet\fP body, enum \fBnovas_origin\fP origin, double *position, double *velocity)"
.br
.ti -1c
.RI "short \fBearth_sun_calc_hp\fP (const double jd_tdb[2], enum \fBnovas_planet\fP body, enum \fBnovas_origin\fP origin, double *position, double *velocity)"
.br
.ti -1c
.RI "void \fBenable_earth_sun_hp\fP (int value)"
.br
.ti -1c
.RI "short \fBsolarsystem\fP (double jd_tdb, short body, short origin, double *position, double *velocity)"
.br
.ti -1c
.RI "short \fBsolarsystem_hp\fP (const double jd_tdb[2], short body, short origin, double *position, double *velocity)"
.br
.ti -1c
.RI "int \fBsun_eph\fP (double jd, double *ra, double *dec, double *dis)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBAuthor\fP
.RS 4
G\&. Kaplan and A\&. Kovacs
.RE
.PP
SuperNOVAS plane calculator functions for the Earth and Sun only, with an orbital model based on the DE405 ephemerides by JPL\&.
.PP
Based on the NOVAS C Edition, Version 3\&.1:
.PP
U\&. S\&. Naval Observatory
.br
 Astronomical Applications Dept\&.
.br
 Washington, DC
.br
 \fRhttp://www\&.usno\&.navy\&.mil/USNO/astronomical-applications\fP
.PP
\fBSee also\fP
.RS 4
\fBsolsys-ephem\&.c\fP 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "short earth_sun_calc (double jd_tdb, enum \fBnovas_planet\fP body, enum \fBnovas_origin\fP origin, double * position, double * velocity)"
Provides the position and velocity of the Earth and Sun only at epoch 'jd_tdb' by evaluating a closed-form theory without reference to an external file\&. This function can also provide the position and velocity of the Sun\&.
.PP
REFERENCES: 
.PD 0
.IP "1." 4
Kaplan, G\&. H\&. 'NOVAS: Naval Observatory Vector Astrometry
    Subroutines'; USNO internal document dated 20 Oct 1988; revised 15 Mar 1990\&. 
.IP "2." 4
Explanatory Supplement to The Astronomical Almanac (1992)\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIjd_tdb\fP [day] Barycentric Dynamical Time (TDB) based Julian date 
.br
\fIbody\fP NOVAS_EARTH (3) or NOVAS_SUN (10) only\&. 
.br
\fIorigin\fP NOVAS_BARYCENTER (0) or NOVAS_HELIOCENTER (1) relative to which to return positions and velocities\&. (For compatibility with existing NOVAS C compatible user implementations, we keep the original NOVAS C argument type here)\&. 
.br
\fIposition\fP [AU] Position vector of 'body' at 'tjd'; equatorial rectangular coordinates in AU referred to the mean equator and equinox of J2000\&.0\&. 
.br
\fIvelocity\fP [AU/day] Velocity vector of 'body' at 'tjd'; equatorial rectangular system referred to the mean equator and equinox of J2000\&.0, in AU/Day\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, -1 if there is a required function is not provided (errno set to ENOSYS) or if one of the output pointer arguments is NULL (errno set to EINVAL)\&. 1 if the input Julian date ('tjd') is out of range, 2 if 'body' is invalid\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBearth_sun_calc_hp()\fP 
.PP
\fBset_planet_provider()\fP 
.PP
\fBsolarsystem()\fP 
.PP
\fBnovas_planet_provider\fP 
.RE
.PP

.PP
References \fBNOVAS_BARYCENTER\fP, \fBNOVAS_EARTH\fP, \fBNOVAS_PLANETS\fP, \fBNOVAS_SSB\fP, \fBNOVAS_SUN\fP, \fBprecession()\fP, \fBradec2vector()\fP, \fBsun_eph()\fP, \fBT0\fP, and \fBTWOPI\fP\&.
.SS "short earth_sun_calc_hp (const double jd_tdb[2], enum \fBnovas_planet\fP body, enum \fBnovas_origin\fP origin, double * position, double * velocity)"
It may provide the position and velocity of the Earth and Sun, the same as solarsystem_earth_sun(), if \fBenable_earth_sun_hp()\fP is set to true (non-zero)\&. Otherwise, it will return with an error code of 3, indicating that high-precision calculations are not provided by this implementation\&.
.PP
NOTES: 
.PD 0
.IP "1." 4
This implementation will always propulate the output position and velocity vectors with the low-precision result, regardless of the return error code, in order to reduce the chance of unpredictable behavior, even if the user does not check the returned error status (which of course they should)\&.  
.PP
.PP
\fBParameters\fP
.RS 4
\fIjd_tdb\fP [day] Barycentric Dynamical Time (TDB) based Julian date 
.br
\fIbody\fP NOVAS_EARTH (3) or NOVAS_SUN (10) only\&. 
.br
\fIorigin\fP NOVAS_BARYCENTER (0) or NOVAS_HELIOCENTER (1) relative to which to return positions and velocities\&. (For compatibility with existing NOVAS C compatible user implementations, we keep the original NOVAS C argument type here)\&. 
.br
\fIposition\fP [AU] Position vector of 'body' at 'tjd'; equatorial rectangular coordinates in AU referred to the mean equator and equinox of J2000\&.0\&. 
.br
\fIvelocity\fP [AU/day] Velocity vector of 'body' at 'tjd'; equatorial rectangular system referred to the mean equator and equinox of J2000\&.0, in AU/Day\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, -1 if there is a required function is not provided (errno set to ENOSYS), or if one of the output pointer arguments is NULL (errno set to EINVAL)\&. 1 if the input Julian date ('tjd') is out of range, 2 if 'body' is invalid, or 3 if the high-precision orbital data cannot be produced (default return value)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBenable_earth_sun_hp()\fP 
.PP
\fBearth_sun_calc()\fP 
.PP
\fBset_planet_provider()\fP 
.PP
\fBsolarsystem_hp()\fP 
.PP
\fBnovas_planet_provider_hp\fP 
.RE
.PP

.PP
References \fBearth_sun_calc()\fP\&.
.SS "void enable_earth_sun_hp (int value)"
Specify whether the high-precision call is allowed to return a low-precision result\&. If set to 0 (false) solarsystem_earth_sun_hp() will return with an error code 3 indicating that a high-precision calculation is not possible\&. Otherise, a non-zero value (true) will let the function to be used without errors, returning the low-precison result of solarsystem_earth_sun() instead\&.
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP (boolean) A non-zero value enables the error-free use of the \fBearth_sun_calc_hp()\fP by allowing to return the low-precision result\&. Otherwise, \fBearth_sun_calc_hp()\fP will return an error code 3 indicating that the high-precision result is not available (this latter is the default behavior)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBearth_sun_calc_hp()\fP 
.RE
.PP

.SS "short solarsystem (double jd_tdb, short body, short origin, double * position, double * velocity)"
A default implementation for regular (reduced) precision handling of major planets, Sun, Moon and the Solar-system barycenter\&. See DEFAULT_SOLSYS in Makefile to choose the implementation that is built into with the library as a default\&. Applications can define their own preferred implementations at runtime via \fBset_planet_provider()\fP\&.
.PP
Since this is a function that may be provided by existing custom user implementations, we keep the original argument types for compatibility, hence 'short' instead of the more informative enums)\&.
.PP
\fBParameters\fP
.RS 4
\fIjd_tdb\fP [day] Barycentric Dynamical Time (TDB) based Julian date 
.br
\fIbody\fP Major planet number (or that for the Sun, Moon, or Solar-system Barycenter position), as defined by enum novas_planet, e\&.g\&. NOVAS_MARS (4), NOVAS_SUN (10) or NOVAS_SSB (0)\&. (For compatibility with existing NOVAS C compatible user implementations, we keep the original NOVAS C argument type here)\&. 
.br
\fIorigin\fP NOVAS_BARYCENTER (0) or NOVAS_HELIOCENTER (1) relative to which to return positions and velocities\&. (For compatibility with existing NOVAS C compatible user implementations, we keep the original NOVAS C argument type here)\&. 
.br
\fIposition\fP [AU] Position vector of 'body' at 'tjd'; equatorial rectangular coordinates in AU referred to the mean equator and equinox of J2000\&.0\&. 
.br
\fIvelocity\fP [AU/day] Velocity vector of 'body' at 'tjd'; equatorial rectangular system referred to the mean equator and equinox of J2000\&.0, in AU/Day\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, -1 if there is a required function is not provided (errno set to ENOSYS), 1 if the input Julian date ('tjd') is out of range, 2 if 'body' is invalid, or 3 if the ephemeris data cannot be produced for other reasons\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnovas_planet\fP 
.PP
\fBsolarsystem_hp()\fP 
.PP
\fBset_planet_provider()\fP 
.PP
\fBplace()\fP 
.PP
\fBephemeris()\fP 
.RE
.PP

.PP
References \fBearth_sun_calc()\fP\&.
.SS "short solarsystem_hp (const double jd_tdb[2], short body, short origin, double * position, double * velocity)"
A default implementation for high precision handling of major planets, Sun, Moon and the Solar-system barycenter\&. See DEFAULT_SOLSYS in Makefile to choose the implementation that is built into the library as a default\&. Applications can define their own preferred implementations at runtime via \fBset_planet_provider_hp()\fP\&.
.PP
Since this is a function that may be provided by existing custom user implementations, we keep the original argument types for compatibility, hence 'short' instead of the more informative enums)\&.
.PP
\fBParameters\fP
.RS 4
\fIjd_tdb\fP [day] Barycentric Dynamical Time (TDB) based Julian date, broken into high and low order components, respectively\&. Typically, as the integer and fractional parts for the highest precision\&. 
.br
\fIbody\fP Major planet number (or that for the Sun, Moon, or Solar-system Barycenter position), as defined by enum novas_planet, e\&.g\&. NOVAS_MARS (4), NOVAS_SUN (10) or NOVAS_SSB (0)\&. (For compatibility with existing NOVAS C compatible user implementations, we keep the original NOVAS C argument type here)\&. 
.br
\fIorigin\fP NOVAS_BARYCENTER (0) or NOVAS_HELIOCENTER (1) relative to which to return positions and velocities\&. (For compatibility with existing NOVAS C compatible user implementations, we keep the original NOVAS C argument type here)\&. 
.br
\fIposition\fP [AU] Position vector of 'body' at 'tjd'; equatorial rectangular coordinates in AU referred to the mean equator and equinox of J2000\&.0\&. 
.br
\fIvelocity\fP [AU/day] Velocity vector of 'body' at 'tjd'; equatorial rectangular system referred to the mean equator and equinox of J2000\&.0, in AU/Day\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, -1 if there is a required function is not provided (errno set to ENOSYS), or some other error code (NOVAS C was not very consistent here\&.\&.\&.)
.RE
.PP
\fBSee also\fP
.RS 4
\fBsolarsystem()\fP 
.PP
\fBset_planet_provider_hp()\fP 
.PP
\fBplace()\fP 
.PP
\fBephemeris()\fP 
.RE
.PP

.PP
References \fBearth_sun_calc_hp()\fP\&.
.SS "int sun_eph (double jd, double * ra, double * dec, double * dis)"
Computes equatorial spherical coordinates of Sun referred to the mean equator and equinox of date\&.
.PP
Quoted accuracy is 2\&.0 + 0\&.03 * T\*{2\*}  arcsec, where T is measured in units of 1000 years from J2000\&.0\&. See reference\&.
.PP
The obliquity equation is updated to equation 5\&.12 of the second reference\&.
.PP
The linear fit to DE405 primarily corrects for the difference between 'old' (Lieske) and 'new' (IAU 2006) precession\&. The difference, new - old, is -0\&.3004 arcsec/cy\&.
.PP
REFERENCES: 
.PD 0
.IP "1." 4
Bretagnon, P\&. and Simon, J\&.L\&. (1986)\&. Planetary Programs and Tables from -4000 to + 2800\&. (Richmond, VA: Willmann-Bell)\&. 
.IP "2." 4
Kaplan, G\&.H\&. (2005)\&. US Naval Observatory Circular 179\&. 
.PP
.PP
\fBParameters\fP
.RS 4
\fIjd\fP [day] jd (double) Julian date on TDT or ET time scale\&. 
.br
\fIra\fP [h] Right ascension referred to mean equator and equinox of date (hours)\&. 
.br
\fIdec\fP [deg] Declination referred to mean equator and equinox of date (degrees)\&. 
.br
\fIdis\fP [AU] Geocentric distance (AU)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if any of the pointer arguments are NULL\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBearth_sun_calc()\fP 
.RE
.PP

.PP
References \fBASEC2RAD\fP, \fBRAD2DEG\fP, \fBT0\fP, and \fBTWOPI\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for SuperNOVAS from the source code\&.
